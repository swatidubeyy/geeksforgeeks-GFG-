// source page --->>> https://practice.geeksforgeeks.org/problems/diagonal-traversal-of-binary-tree/1


//*****************************************************************************MySolution(1.8 sec)*************************************************************************************


class Tree
{
    static int md = 0;
    static void traversal(Node node , HashMap<Integer , ArrayList<Integer>> hm , int digno){
        if(node == null){
            return;
        }
        if(digno > md){
            md = digno;
        }
        if(hm.containsKey(digno) == false){
            hm.put(digno , new ArrayList<Integer>());
        }
        hm.get(digno).add(node.data);
        
        traversal(node.left , hm , digno+1);
        traversal(node.right , hm , digno);
    }
    public ArrayList<Integer> diagonal(Node root)
      {
        HashMap<Integer , ArrayList<Integer>> hm = new HashMap<>();
        traversal(root , hm , 0); 
        
        ArrayList<Integer> retVal = new ArrayList<>();
        
        for(int d = 0 ; d <= md ; d++){
            ArrayList<Integer> al = hm.get(d);
            if(al == null){
                continue;
            }
            for(Integer item : al){
                retVal.add(item);
            }
        }
        return retVal;
    }
}


//************************************************************************More efficient(1.5 sec)********************************************************************************


class Tree
{
    // Diagonal sum method
    public ArrayList<Integer> diagonal(Node root)
    {
        // Queue which stores tree nodes
        Queue<Node> queue = new LinkedList<Node>();
        queue.add(root);

        // Loop while the queue is not empty
        ArrayList<Integer> diagonalNode = new ArrayList<Integer>();
        while (!queue.isEmpty())
        {
            // Remove the front tree node from queue.
            Node curr = queue.remove();


            while (curr != null)
            {
				
                diagonalNode.add(curr.data);
                // If for any node the left child is not null add
                // it to the queue for future processing.
                if (curr.left != null)
                {
                    queue.add(curr.left);
                }

                // Move to the current node's right child.
                curr = curr.right;
            }
        }
        return diagonalNode;
    }
}
